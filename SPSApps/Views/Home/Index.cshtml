@model SPSApps.Models.Register.HomeDTO

@{
   // Layout = null;
}
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<div style="margin: 20px auto">
    <div style="width: 100%; height: 100px">

        <div style="float: left">
            <img style="width:60px" class="profile-img" src="~/img/profile.png" />
        </div>
        <div style="margin-left: 40px; float: left">
            <h5 style="font-weight:bold">@Model.Name</h5>
            <h5>@Model.Email</h5>
        </div>
    </div>


    <div style="float:none;">
        <style>
            .wrapper {
                height: 100%;
            }
        </style>

        <div class="wrapper">
            <div style="background-repeat:no-repeat;background-image: linear-gradient(to right, #FFFF, #7465E4);background-position:-25px -25px;background-size:  100% 250px; margin: 0 auto; height: 250px;  border-radius: 50px 20px;">
                <div style="width:80%; height:200px; margin: 0 auto;top: 10px" id="map"></div>
            </div>
            <!-- prettier-ignore -->
            <script>
                (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
                    ({ key: "AIzaSyDYW_g6zWahp8GXuGARpDp7MiMZih6VdU8", v: "weekly" });</script>
            <script>
                let map;

                async function initMap() {
                    const { Map } = await google.maps.importLibrary("maps");

                    map = new Map(document.getElementById("map"), {
                        center: { lat: -34.397, lng: 150.644 },
                        zoom: 8,
                    });
                }

                initMap();
            </script>
        </div>
    </div>
</div>

<link rel="stylesheet" href="~/css/home.css" asp-append-version="true" />
@*
<link rel="stylesheet" href="~/css/users.css" asp-append-version="true" /> *@
